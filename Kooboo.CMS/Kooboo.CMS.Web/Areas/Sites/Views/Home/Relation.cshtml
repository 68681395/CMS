@using Kooboo.CMS.Common.Runtime;
@using Kooboo.CMS.Content.Services;
@using Newtonsoft.Json
@{
    ViewBag.Title = "Start".Localize();
    Layout = "~/Views/Shared/Site.cshtml";

}

@section Panel{

}

<div class="topbar">
    <h1 class="title">Relation</h1>
</div>
<div class="block fixed">
    <div class="block relation" id="showRelation"></div>
    <span id="fullSiteName">fullname</span>
</div>


<script>
    var site =  @Html.Raw(JsonConvert.SerializeObject(ViewBag.Sites, Formatting.Indented));
    var content = @Html.Raw(JsonConvert.SerializeObject(ViewBag.Databases, Formatting.Indented));
    var membership = @Html.Raw(JsonConvert.SerializeObject(ViewBag.Memberships, Formatting.Indented));

    var max_length = Math.max(site.length, content.length, membership.length);

    var w = 1000;

    var rect_w = w / 100 * 20;
    var rect_h = 39;
    var rect_margin_h = w / 100 * 2;
    var h = max_length * (rect_h + rect_margin_h) + 100;

    var svg = d3.select('#showRelation').append('svg').attr('width', w).attr('height', h);

    var titleContainer = svg.append('g').attr('class','title');
    var titles = titleContainer.selectAll().data(['@("Membership".Localize())', '@("Site".Localize())', '@("Content database".Localize())'])
        .enter().append('foreignObject')
        .attr('class', 'title')
        .attr('width', rect_w)
        .attr('height', rect_h)
        .attr('x', function (d, i) { return i * w / 100 * 30 + 70 })
        .attr('y', 0)
        .html(function(d){return '<h2 class="title">'+d+'</h2>'});

    // rects and texts
    // Empty case
    function createEmptyRect(empty_type){
        switch (empty_type){
            case 'membership':
                var text = '@("Create new membership".Localize())';
                var offset = 0;
                var url = '@(Url.Action("Create", new { controller = "Membership", area = "Membership", @return = Request.RawUrl }))';
                break;
            case 'site':
                var text = '@("Create new site".Localize())';
                var offset = 1;
                var url = '@(Url.Action("Create", new { controller = "Site", area = "Sites", @return = Request.RawUrl }))';
                break;
            case 'content':
                var text = '@("Create new content database".Localize())';
                var offset = 2;
                var url = '@(Url.Action("Create", new { controller = "Repository", area = "Contents", @return = Request.RawUrl }))';
                break;
        }
        svg.selectAll().data([1]).enter().append('foreignObject')
            .attr('x', offset * 300 + 70)
            .attr('y', 100)
            .attr('width', rect_w)
            .attr('height', rect_h)
            .attr('class', 'empty')
            .html($.format('<div class="node empty"><a href="{0}">{1}</a></div>',url,text));
    }
    if(!membership.length){
        createEmptyRect('membership');
    }
    if(!site.length){
        createEmptyRect('site');
    }
    if(!content.length){
        createEmptyRect('content');
    }

    // Full case
    var siteNode = svg.selectAll().data(site).enter().append('foreignObject');
    var contentNode = svg.selectAll().data(content).enter().append('foreignObject');
    var membershipNode = svg.selectAll().data(membership).enter().append('foreignObject');

    siteNode.attr('x', w / 100 * 30 + 70)
            .attr('y', function (d) { return 40 + d.num * (rect_h + rect_margin_h) })
            .attr('width', rect_w)
            .attr('height', rect_h)
            .attr('class', 'site')
            .attr('data-name', function(d){return d.name})
            .html(function(d){return '<div class="node site" title="'+d.fullText+'"><span class="icon"><img src="/Images/invis.gif" class="icon site"></span><span class="name">'+d.text+'</span><a href="'+d.url+'" title="Click to manage this site"><img src="/Images/invis.gif" class="icon arrow-right"></a></div>'});

    contentNode.attr('x', w / 100 * 60 + 70)
               .attr('y', function (d, i) { return 40 + i * (rect_h + rect_margin_h) })
               .attr('width', rect_w)
               .attr('height', rect_h)
               .attr('class', 'content')
               .attr('data-name', function(d){return d.name})
               .html(function(d){return '<div class="node content"><span class="icon"><img src="/Images/invis.gif" class="icon content"></span><span class="name">'+d.text+'</span><a href="'+d.url+'" title="Click to manage this content"><img src="/Images/invis.gif" class="icon arrow-right"></a></div>'});

    membershipNode.attr('x', 70)
                  .attr('y', function (d, i) { return 40 + i * (rect_h + rect_margin_h) })
                  .attr('width', rect_w)
                  .attr('height', rect_h)
                  .attr('class', 'membership')
                  .attr('data-name', function(d){return d.name})
                  .html(function(d){return '<div class="node membership"><span class="icon"><img src="/Images/invis.gif" class="icon membership"></span><span class="name">'+d.text+'</span><a href="'+d.url+'" title="Click to manage this membership"><img src="/Images/invis.gif" class="icon arrow-right"></a></div>'});

    var hasMemberships = _.filter(site,function(d){
        return d.membership > -1;
    });
    var hasContents = _.filter(site,function(d){
        return d.content > -1;
    });

    // lines
    var site_member_lines = svg.selectAll('line.site_member').data(hasMemberships).enter().append('line');
    var site_content_lines = svg.selectAll('line.site_content').data(hasContents).enter().append('line');

    site_member_lines.attr('x1', w / 100 * 30 + 70)
					.attr('y1', function (d) { return 40 + d.num * (rect_h + rect_margin_h) + rect_h / 2 })
					.attr('x2', w / 100 * 20 + 70)
					.attr('y2', function (d) { return 40 + d.membership * (rect_h + rect_margin_h) + rect_h / 2 })
					.attr('class', 'member-line')
					.attr('stroke', '#BBB');
    site_content_lines.attr('x1', w / 100 * 50 + 70)
					.attr('y1', function (d) { return 40 + d.num * (rect_h + rect_margin_h) + rect_h / 2 })
					.attr('x2', w / 100 * 60 + 70)
					.attr('y2', function (d) { return 40 + d.content * (rect_h + rect_margin_h) + rect_h / 2 })
					.attr('class', 'content-line')
					.attr('stroke', '#BBB');

    // Show relation
    $('foreignObject.site').on('mouseenter', function () {
        $(this).parents('.block.relation').addClass('hover');
        $(this).children('.node').addClass('hover');
        var site_name = $(this).data('name');
        for (var i = 0; i < site.length; i++) {
            if (site[i]['name'] == site_name) {
                var index = i;
                break;
            } else {
                continue;
            }
        }
        var content_index = site[index]['content'];
        var membership_index = site[index]['membership'];
        if(content_index > -1){
            $('foreignObject.content').eq(content_index).children('.node').addClass('hover');

        }
        if(membership_index > -1){
            $('foreignObject.membership').eq(membership_index).children('.node').addClass('hover');
        }

        $(this).on('click', function(){
            $(this).parents('.block.relation').addClass('active');
            $(this).parents('.block.relation').find('.node.active').removeClass('active');
            $(this).children('.node').addClass('active');
            if(content_index > -1){
                $('foreignObject.content').eq(content_index).children('.node').addClass('active');
            }
            if(membership_index > -1){
                $('foreignObject.membership').eq(membership_index).children('.node').addClass('active');
            }
        });

    }).on('mouseleave', function(){
        $('.block.relation').removeClass('hover');
        $('.block.relation').find('.node.hover').removeClass('hover');
    });

    $('foreignObject.content').on('mouseenter', function () {
        $(this).parents('.block.relation').addClass('hover');
        $(this).children('.node').addClass('hover');
        var content_name = $(this).data('name');
        for(var i=0;i<content.length;i++){
            if(content[i].name==content_name){
                var index = i;
                break;
            } else {
                continue;
            }
        }
        for (var i = 0; i < site.length; i++) {
            if (site[i]['content'] == index) {
                $('foreignObject.site').eq(site[i]['num']).children('.node').addClass('hover');
                var content_index = site[i]['content'];
                var membership_index = site[i]['membership'];
                if(content_index > -1){
                    $('foreignObject.content').eq(content_index).children('.node').addClass('hover');
                }
                if(membership_index > -1){
                    $('foreignObject.membership').eq(membership_index).children('.node').addClass('hover');
                }
            }
        }
        $(this).on('click', function(){
            $(this).parents('.block.relation').addClass('active');
            $(this).parents('.block.relation').find('.node.active').removeClass('active');
            $(this).children('.node').addClass('active');
            for (var i = 0; i < site.length; i++) {
                if (site[i]['content'] == index) {
                    $('foreignObject.site').eq(site[i]['num']).children('.node').addClass('active');
                    var content_index = site[i]['content'];
                    var membership_index = site[i]['membership'];
                    if(content_index > -1){
                        $('foreignObject.content').eq(content_index).children('.node').addClass('active');
                    }
                    if(membership_index > -1){
                        $('foreignObject.membership').eq(membership_index).children('.node').addClass('active');
                    }
                }
            }
        });
    }).on('mouseleave', function(e){
        $('.block.relation').removeClass('hover');
        $('.block.relation').find('.node.hover').removeClass('hover');
    });

    $('foreignObject.membership').on('mouseenter', function () {
        $(this).parents('.block.relation').addClass('hover');
        $(this).children('.node').addClass('hover');
        var membership_name = $(this).data('name');
        for(var i=0;i<membership.length;i++){
            if(membership[i].name==membership_name){
                var index = i;
                break;
            } else {
                continue;
            }
        }
        for (var i = 0; i < site.length; i++) {
            if (site[i]['membership'] == index) {
                $('foreignObject.site').eq(site[i]['num']).children('.node').addClass('hover');
                var content_index = site[i]['content'];
                var membership_index = site[i]['membership'];
                if(content_index > -1){
                    $('foreignObject.content').eq(content_index).children('.node').addClass('hover');
                }
                if(membership_index > -1){
                    $('foreignObject.membership').eq(membership_index).children('.node').addClass('hover');
                }
            }
        }
        $(this).on('click', function(e){
            $(this).parents('.block.relation').addClass('active');
            $(this).parents('.block.relation').find('.node.active').removeClass('active');
            $(this).children('.node').addClass('active');
            for (var i = 0; i < site.length; i++) {
                if (site[i]['membership'] == index) {
                    $('foreignObject.site').eq(site[i]['num']).children('.node').addClass('active');
                    var content_index = site[i]['content'];
                    var membership_index = site[i]['membership'];
                    if(content_index > -1){
                        $('foreignObject.content').eq(content_index).children('.node').addClass('active');
                    }
                    if(membership_index > -1){
                        $('foreignObject.membership').eq(membership_index).children('.node').addClass('active');
                    }
                }
            }
        });
    }).on('mouseleave', function(e){
        $('.block.relation').removeClass('hover');
        $('.block.relation').find('.node.hover').removeClass('hover');
    });

    $('html').on('click', function(e){
        var target = $(e.target);
        if(target.parents('foreignObject').length < 1 && target[0].nodeName!='foreignObject'){
            $('.block.relation').removeClass('active');
            $('.block.relation').find('.node.active').removeClass('active');
        }
    });
</script>
