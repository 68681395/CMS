@model dynamic
@{
    var dataSourceContext = new Kooboo.CMS.Sites.DataSource.DataSourceContext(Site.Current, null);
    var dataSources = ServiceFactory.GetService<DataSourceSettingManager>().All(Site.Current, "")
        .Select(it => new
        {
            Name = it.DataName,
            IsEnumerable = it.DataSource.IsEnumerable(),
            Definitions = it.DataSource.GetDefinitions(dataSourceContext).Keys
        });

    var dataSourceJson = Newtonsoft.Json.JsonConvert.SerializeObject(dataSources);

    var pages = ServiceFactory.PageManager.AllPagesFlattened(Site.Current)
        .Select(it => it.LastVersion().AsActual())
        .Where(it => it != null)
        .Select(it => new
        {
            it.FullName,
            Parameters = it.Route.GetRouteParameters()
        });
    var pagesJosn = Newtonsoft.Json.JsonConvert.SerializeObject(pages);
}
<script>

    $(function () {
        (function initCodeMirror() {
            var textArea = $('#Body');
            textArea.codeMirror();
            var codeMirrorAPI = textArea.data("codeMirror");
            codeMirrorAPI.on('change', function (e) {
                if (e && e.historySize().undo > 0) {
                    window.leaveConfirm.stop();
                } else {
                    window.leaveConfirm.pass();
                }
            });
            $('#tab_sourceCode').on('show',function(){
                codeMirrorAPI.refresh();
                //setTimeout(function(){codeMirrorAPI.refresh();},10);
            })
            window.ajaxFormParam = {
                beforeSerialize: function ($form, options) {
                    var codeMirrorAPI = textArea.data("codeMirror");
                    var text = codeMirrorAPI.getText();
                    textArea.val(text);
                }
            };
        })();

        $('.tabs').koobooTab();


    });
    var meta = {
        dataSourceMeta : @Html.Raw(dataSourceJson),
        getSelectedDataSources :function(){
            return _.map(listModel.selectedDataSources(),function(item){
                return {MainDataSourceName:item.MainDataSourceName(),RelatedDataSources:item.RelatedDataSources()}
            });
        },
        getDataSourceDefinitions:function(dataSources){
            return _.filter(this.dataSourceMeta,function(item){
                return _.find(dataSources,function(ds){
                    return ds.MainDataSourceName == item.Name;
                })!=null;
            });
        },
        pages: @Html.Raw(pagesJosn)
        };

</script>
